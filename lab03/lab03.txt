Authors: Cai Glencross and Jeff Carney
Class: CS105 - Systems
Professor: Everett Bull
Date: Jan 30, 2018

PROBLEM 1:

1.	When we type continue, we get a Segmentation Fault.

2.	We are on line number 17 in main in problem1.c

3.	You can not see the stackframe for the atoi call :(

4.	argv[1] = 0x0

5.	The program prints -1835

6.	argc = 2 ,
	argv = {<Some Address> "Users/jcarney/Documents/Systems/lab03/problem1", <Some Address> "5"}
	The first argument is the path to the executable, from the run command, the second thing is 5 because 5 was stored in memory from the previous run command.

7.	We end up in the function loop_while from line 5 in problem1.c

8.	We see the fist ten lines of problem1.c (up to the closing brace of the while loop in loop_while)
	after hitting enter we see the rest of the problem1.c file (the next ten lines)

9.	Shows you the next few lines after what you stepped to

10.	result = 5, a = 5, b = 16

11. The first four lines of the loop_while function are shown, they are in this order because of the optimizer making the code more efficient.

12. The address of the instruction that calls atoi is 0x00000000004004ba
	The address of the instruction that calls printf is 0x00000000004004e7

13.	There is no call to loop while, the compiler figures out how to optimize what you did, starting with an lea call at address 0x4004bf, right underneath the call to atoi.

14.	It prints 0x2a which is hexadecimal 42, it prints out 47 which is the decimal representation of that hex number

15. The constant 16 comes from the argument b, the compiler has optimized to a constant because it never changes and that is faster than accessing memory.

16.	Optimized out! not a necessary call.

17.	Wow is right.


PROBLEM 2:

1. 	It prints 1078530011, which is the decimal version of the hex value.

2.	This prints the hexadecimal that is in the code, which is much more edifying!!!

3. 	It prints the individual bytes of p/x puzzle1.

4. The human friendly value of puzzle1 is 3.14159274 (pi!!).

5. It's slightly off because there are rounding issues with floats.

6. The human friendly value is euler's number 2.7182818284590451.

7. I am not surprised.

8. It is slightly off because of rounding issues with floats.

9. The string "Was that really so hard?" is stored puzzle3.

10. No, we didn't need to print out a_size because gdb prints it at the breakpoint.

11. The value of a is 0x602010.

12. After returning the value of a is still 0x602010.

13. After the seventh step the value of a is 0x602014. i is 1.

14. We end up right before the next iteration of the for loop.

15. The value of a is now 0x602018.

16. The value of *a 1.

17. We are now at line 23 in the problem2.c , about to execute line 24.

18. The value of a is 0x602030.

19. The value of *a is 21.

PROBLEM 3:

1. The output is 1 47 2 42 3.

2. It stops at line 32, about to execute line 33.

3. Now it stops at line 34, about to execute line 35.

4. WRONG!

5. This corresponds to the moment in the for loop where we initialize the value of i to be 1.

6. This tells us that the breakpoint is at line 36 in problem2.c.

7. The values of the array are {0, 0, 0, 0, 0, 0}.

8. We stop back at breakpoint 3 (line 36 in problem2.c).

9. We haven't covered r8-r15, eflags, cs, ss, ds, es, fs.

10. IF is set right now.

11. The value $rax is 6299664 and p/x $rax prints 0x602010. Since we know this is a hexadecimal memory address, it makes more sense.

12. We see the instructions the the instruction pointer is pointing to. The instruction pointer shows only instuctions after the breakpoint because that's where we stopped. The disassem instruction showed the entire method.

13. We are at line 24 in problem2.c, about to make a call to hmc_pomona_fix.

14. The instruction address that will be executed next is 0x0000000000400653, this is the call to hmc_pomona_fix.

15. If we type stepi, we expect that we would step to the next instruction. If we type nexti, we expect that we would step to the next call instruction.

16. Line 26 is the source line that's listed.

17. rsp points to 0x7fffffffe8e0 and rbp points to 0x7fffffffe900.

18. rsp now points to 0x7fffffffe908 and rbp now points to 0x7fffffffe940.
